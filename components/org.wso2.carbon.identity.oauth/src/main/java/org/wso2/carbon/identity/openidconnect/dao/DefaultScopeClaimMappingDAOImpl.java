/*
 *
 *   Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 * /
 */

package org.wso2.carbon.identity.openidconnect.dao;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.wso2.carbon.identity.application.common.util.IdentityApplicationManagementUtil;
import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;
import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;
import org.wso2.carbon.utils.DBUtils;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * This interface handles all the DAO layer activities which are related to OIDC scope claim persistence.
 */
public class DefaultScopeClaimMappingDAOImpl implements DefaultScopeClaimMappingDAO {

    private static final String ID = "ID";
    private final Log log = LogFactory.getLog(DefaultScopeClaimMappingDAOImpl.class);

    @Override
    public void insertAllScopes(int tenantId, Map<String, String> ScopeClaimMap, boolean isOnActivate)
            throws IdentityOAuth2Exception {

        String sqlStmt = SQLQueries.STORE_IDN_OIDC_SCOPES;
        PreparedStatement prepStmt = null;
        Connection connection = null;
        ResultSet resultSet = null;
        try {
            connection = IdentityDatabaseUtil.getDBConnection();
            String dbProductName = connection.getMetaData().getDatabaseProductName();
            prepStmt = connection.prepareStatement(sqlStmt, new String[]{
                    DBUtils.getConvertedAutoGeneratedColumnName(dbProductName, ID)});
            if (isOnActivate && !loadAllScopes(connection)) {
                insertScopes(ScopeClaimMap, prepStmt, connection, tenantId);
            } else if (!isOnActivate) {
                insertScopes(ScopeClaimMap, prepStmt, connection, tenantId);
            }
        } catch (SQLException e) {
            String errorMessage = "Error when storing the OIDC scopes.";
            log.error(errorMessage, e);
            throw new IdentityOAuth2Exception(errorMessage, e);
        } finally {
            IdentityDatabaseUtil.closeAllConnections(connection, resultSet, prepStmt);
        }
    }

    private void insertScopes(Map<String, String> ScopeClaimMap, PreparedStatement preparedStatement,
                              Connection connection, int tenantId) throws IdentityOAuth2Exception {

        ResultSet rs = null;
        for (Map.Entry<String, String> entry : ScopeClaimMap.entrySet()) {
            if (entry != null) {
                String scope = entry.getKey();
                String claims = entry.getValue();
                try {
                    if (!loadScope(connection, scope)) {
                        preparedStatement.setString(1, scope);

                        preparedStatement.setInt(2, tenantId);
                        preparedStatement.execute();
                        int scopeId = -1;
                        rs = preparedStatement.getGeneratedKeys();
                        if (rs.next()) {
                            scopeId = rs.getInt(1);
                        } else {
                            log.warn("Unable to persist the scope : " + scope);
                        }
                        connection.commit();
                        if (scopeId != -1) {
                            insertClaims(tenantId, scopeId, claims, connection);
                        }
                    }

                } catch (SQLException e) {
                    String errorMessage = "Error when inserting oidc scopes.";
                    log.error(errorMessage, e);
                    throw new IdentityOAuth2Exception(errorMessage, e);
                } finally {
                    IdentityDatabaseUtil.closeResultSet(rs);
                }
            }
        }
    }

    @Override
    public Map<String, String> loadScopesClaimsMapping(int tenantId) throws IdentityOAuth2Exception {

        String sql = SQLQueries.GET_IDN_OIDC_SCOPES_CLAIMS;
        Map<String, String> scopeClaimMapping = new HashMap<>();

        try {
            Connection connection = IdentityDatabaseUtil.getDBConnection();
            PreparedStatement prepStmt = connection.prepareStatement(sql);
            ResultSet resultSet = prepStmt.executeQuery();
            while (resultSet.next()) {
                String key = resultSet.getString(1);
                String value = resultSet.getString(2);
                if (!scopeClaimMapping.containsKey(key)) {
                    scopeClaimMapping.put(key, value);
                } else {
                    String claims = scopeClaimMapping.get(key) + "," + value;
                    scopeClaimMapping.put(key, claims);
                }
            }
        } catch (SQLException e) {
            String errorMessage = "Error when loading oidc scopes.";
            log.error(errorMessage, e);
            throw new IdentityOAuth2Exception(errorMessage, e);
        }
        return scopeClaimMapping;
    }

    private void insertClaims(int tenantId, int scopeId, String claimsList, Connection connection)
            throws IdentityOAuth2Exception {

        String sqlStmt = SQLQueries.STORE_IDN_OIDC_CLAIMS;
        PreparedStatement prepStmt = null;
        try {
            prepStmt = connection.prepareStatement(sqlStmt);
            if (StringUtils.isNotEmpty(claimsList)) {
                String[] claimArr = claimsList.split(",");
                List<String> lstClaim = Arrays.asList(claimArr);
                for (String claim : lstClaim) {
                    prepStmt.setInt(1, scopeId);
                    prepStmt.setInt(2, tenantId);
                    prepStmt.setString(3, claim);
                    prepStmt.addBatch();
                    if (log.isDebugEnabled()) {
                        log.debug("Claim value :" + claim + " is added to the batch.");
                    }
                }
                prepStmt.executeBatch();
                connection.commit();
            }

        } catch (SQLException e) {
            String errorMessage = "Error when storing oidc claims.";
            log.error(errorMessage, e);
            throw new IdentityOAuth2Exception(errorMessage, e);
        } finally {
            IdentityApplicationManagementUtil.closeStatement(prepStmt);
        }
    }

    private boolean loadAllScopes(Connection connection) throws IdentityOAuth2Exception {

        String sql = SQLQueries.GET_ALL_IDN_OIDC_SCOPES;
        PreparedStatement prepStmt = null;
        ResultSet resultSet;

        try {
            prepStmt = connection.prepareStatement(sql);
            resultSet = prepStmt.executeQuery();
            if (resultSet.next()) {
                return true;
            } else {
                return false;
            }
        } catch (SQLException e) {
            String errorMessage = "Error when loading oidc scopes.";
            log.error(errorMessage, e);
            throw new IdentityOAuth2Exception(errorMessage, e);
        } finally {
            IdentityDatabaseUtil.closeStatement(prepStmt);
        }
    }

    private boolean loadScope(Connection connection, String scope) throws IdentityOAuth2Exception {

        String sql = SQLQueries.GET_IDN_OIDC_SCOPE;
        PreparedStatement prepStmt;
        ResultSet resultSet;

        try {
            prepStmt = connection.prepareStatement(sql);
            prepStmt.setString(1, scope);
            resultSet = prepStmt.executeQuery();
            if (resultSet.next()) {
                return true;
            } else {
                return false;
            }
        } catch (SQLException e) {
            String errorMessage = "Error when loading oidc scope: " + scope;
            log.error(errorMessage, e);
            throw new IdentityOAuth2Exception(errorMessage, e);
        }
    }

}
